'use strict';

/////////////////////////////////////////////////////
// При работе с преметивеыми типами данных (строки, числа, логичиские значения) Они передаются по значентю

// Передача данных но ЗНАЧЕНИЮ
let a = 5,  // Сождаем переменную (хранилище данных)
    b = a;  // в внутерь =>b помещаем значение =>a, тоисть =>b будет также =>5

b = b + 5;  // модифицырованое значение =>b 5 + 5

console.log(b);  // выведется в консоль =>10
console.log(a);  // выведется в консоль =>5



/////////////////////////////////////////////////////

// При работе с объектами - Массивы, функции, спец объекты: то у нас идет передача не по значению а по ссылку
// Передача данных по ССЫЛКЕ

const obj = {  // Создаем переменную с обектом
    a: 5, // свойство a=5
    b: 1  // свойство b=1
};

const copy = obj;  // Создаем переменную =>copy и во внутрь помещаем =>obj (значение обекта { a: 10, b: 1 })
// !!!! Это ССЫЛКА: в переменную =>copy кладется уже ссылка на =>obj

copy.a = 10; // Обращаемся к переменной =>а к ее свойству и туда уже помещаем =>10; - но так не работает!!!
// !!!! Модифицыруя копию мы работаем не с копией а с сылкой на =>obj и изминяем в нем значение!

console.log(copy); // выведется в консоль { a: 10, b: 1 }
console.log(obj);  // выведется в консоль { a: 10, b: 1 }



///////////////////////////////////////////////////////

// Копии объектов и массивов
// Поверхносное копирование - тоисть работает только когда нет дополнительной вложенности => c:{x: 7, y:4}(будет ссылочный тип данных)

// функция с цыклом

function copy1(mainObj) {  // функция =>copy1 пренимает в себя обект =>(mainObj)
    let objCopy1 = {}; // функция при помощи цыкла создаст новый обект перебирая старые свойства которые были в нашем обекте

    let key;
    for (key in mainObj) {
        objCopy1 [key] = mainObj [key]; // берем =>objCopy1 создаем в нем новое скойство =>[key] и дальше делаем копию из нашего главного обекта =>mainObj [key]
    }

    return objCopy1;  // возвращаем =>objCopy1 наружу из функции
}

const numbers = {  // Переменная - Обектa numbers
    a: 2,          
    b: 5,
    c: {         // Вложенный обект
        x: 7,
        y: 4
    }
};

const newNumbers = copy1(numbers);  // копирование нового обекта. Функция =>copy1 примит в себя обект =>numbers и вернет нам новый обект который будет копией

newNumbers.a = 9;  // обращакмся к свойству =>a и изменяем его с =>2 в =>numbers на =>9 в =>newNumbers

console.log(newNumbers); // выводится { a: 9, b: 5, c: { x: 7, y: 4 } } скопированный обект в котором мы изменили  =>a на =>9
console.log(numbers);    // выводится { a: 2, b: 5, c: { x: 7, y: 4 } }



////////////////////////////////////////////////////////

// Метод Object.assign() призначено для копіювання у цільовий об'єкт всіх особистих (не успадкованих) перелічуваних властивостей одного або декількох об'єктів. 

const numbers1 = {  // Переменная - Обектa numbers1
    a: 2,          
    b: 5,
    c: {         // Вложенный обект
        x: 7,
        y: 4
    }
};

console.log(numbers1); // в консоле выводится { a: 2, b: 5, c: { x: 7, y: 4 } }

const add = { // Обект add
    d: 17,
    e: 20
};

console.log(Object.assign(numbers1, add)); // первым идет обект в который мы хотим все поместить =>numbers1
// вторым идет обект который нужно переместить (пресоидинеть) =>add
// в консоле выводится { a: 2, b: 5, c: { x: 7, y: 4 }, d: 17, e: 20 }

//////////Копия с пустым объектом уже существующго объекта//////////////

const clon = Object.assign({}, add); // Просто копия объекта =>add
// создается новый пустой объект =>{}, в него помещаем старый объект =>add
clon.d = 20; // Берем объект =>clon обращаемся к свойству =>d и заминяем его на =>20;

console.log(add);  // в консоле выводится { d: 17, e: 20 }
console.log(clon); // в консоле выводится { d: 20, e: 20 }


///////////////////////////////////////////////////////////////
// Копии Массива [Array]
// https://developer.mozilla.org/uk/docs/Web/JavaScript/Reference/Global_Objects/Array/slice

const oldArray = ['a', 'b', 'c'];
// const newArray = oldArray; если записать так то в =>newArray поместится ссылка. Тоисть изминяя newArray мы будем изминять и oldArray
const newArray = oldArray.slice(); // .slice() это метод который позволяет скопировать старый массив

newArray[1] = 'abrakadabra'; // Изменяем в =>newArray[1] 'b' на 'abrakadabra'

console.log(oldArray); // в консоле выводится [ 'a', 'b', 'c' ]
console.log(newArray); // в консоле выводится [ 'a', 'abrakadabra', 'c' ]

///////////////////////////////////////////////////////////////
// Копирование - Оператор разворота [...] Новые стандарты ES6-ES9 => spread оператор
//////////// Пример №1

const video = ['youtube', 'vimeo', 'rutube'],
      blogs = ['wordpress', 'livejornal', 'blogger'],
      internet = [...video, ...blogs, 'vk', 'facebook']; // Используем прератор разворота [...] чтобы вытащить все ети переменные 

console.log(internet); // в консоле выводится ['youtube','vimeo','rutube','wordpress','livejornal','blogger','vk','facebook']

//////////// Пример №2

function log(a, b, c) {
    console.log(a);
    console.log(b);
    console.log(c);
}

const num = [2, 5, 7];

log(...num); // в консоле выводится => 2 5 7


//////////////////////////////////////////////////////////////
// Чеивертый №4 способ cоздания поверхносных копий обекта

const array = ['a', 'b']; // Переменная  с масивом а, b.
const newAarray = [...array]; // В переменной =>newAarray помещается точная копия =>array через [...] => spread

newAarray[1] = 'abrakadabra';
console.log(newAarray); // в консоле выводится [ 'a', 'abrakadabra' ]
console.log(array); // в консоле выводится [ 'a', 'b' ]

///////////////////////////////
// Спред оператор в объекте

const objNew = {
    one: 1,
    two: 2
};

const newObjNew = {...objNew};  // Создание новой копии "objNew" в "newObjNew" 

console.log(newObjNew); // в консоле выводится { one: 1, two: 2 }
