'use strict';
 ///////////////////////////////////

 /*
function showFirstMessage() {   // Имя функции => showFirstMessage Имя должно быть глаголом с припискай того над чем выполняется дейсвие
    console.log('Hallo Wowld'); // Внутри фигурных скобок выполняются действия
}

showFirstMessage(); // Вызов функции (Запустить)
*/

///////////////////////////////////

/*
function showFirstMessage(text) {  // В круглых скобках указываем (Аргумент)
    console.log(text); // Вывести аргумент (text);
}

showFirstMessage('Hallo Wowld');  // Передаем Аргумент для выполнения
*/

////////////////////////////////////
// Локальная переменные (let; const;) в нутри функции
/*
function showFirstMessage(text) {
    console.log(text);
    let num = 20; // Локальная переменная. Ее видно только в нутри функции, 
}   // и вызвать эту функцию из вне {...} невозможно. => console.log(num);
    // выдаст сообщение => ReferenceError: num is not defined
     
showFirstMessage('Hallo Wowld');
console.log(num); // ReferenceError: num is not defined так как переменная существует только в нутри функции {фигурных скобок}
*/

/////////////////////////////////////
// Глобальная переменная (let; const;) в нутри функции
/*
let num = 20; // Глобальная переменная
function showFirstMessage(text) {
    console.log(text);
    num = 10; // Локальная переменная. Теперь мы просто перезаписываем значение глобальной переменной
}
     
showFirstMessage('Hallo Wowld');
console.log(num); // Теперь в консоле выведется => Hallo Wowld; 10 потому что внутри функции мы изминили значение переменной (num)
*/

////////////////////////////////////
/*
let num = 20; // Глобальная переменная
function showFirstMessage(text) {
    console.log(text);
    let num = 10; // Локальная переменная. Будет работать только в нутри функуии
}
     
showFirstMessage('Hallo Wowld');
console.log(num);  // Теперь в консоле выведется => Hallo Wowld; 20 потому что внутри функции создана совем другая локальная переменная просто с одинаковым именем (num)
*/

//////////////////////////////////////
/*
let num = 20; // Глобальная переменная
function showFirstMessage(text) {
    console.log(text);
    let num = 10; // Локальная переменная. Будет работать только в нутри функуии
    console.log(num); // Вызов в консоль локальной переменной => let num = 10;
}
     
showFirstMessage('Hallo Wowld');
console.log(num);  // Теперь в консоле выведется => Hallo Wowld; 10; 20 потому что внутри функции теперь прописано действие вивод локальной функции 
*/

///////////////////////////////////////
// ======> Замыкание функции - Это сама функция вместе со всеми внешними переменными которые ей доступны
let num = 20; // Глобальная переменная
function showFirstMessage(text) {
    console.log(text);
    console.log(num); // Вызов в консоль локальной переменной => let num - но так как ее нет в нутри функции то поиск идет на уровень выше (на глобальнуб num = 20;)
}
     
showFirstMessage('Hallo Wowld');
console.log(num);  // // Теперь в консоле выведется => Hallo Wowld; 20; 20 потому что внутри функции переменной нам не найдино и поиск пошел на уровень выше (на глобальнуб num = 20;)

//////////////////////////////////////

function calc(a, b) {
    return (a + b);  // окончание функции => return
    console.log('Этот код уже не выведется'); // Ошибка => Unreachable 'console' after 'return'.
    // после return мы ничего не задаем так как этот код не выполнится (Unreachable)!
}

console.log(calc(4, 3));
console.log(calc(5, 6));
console.log(calc(5, 5));

////////////////////////////////////
// возвращение значения наружу через => return

function ret() {
    let num = 50;

    // В практике здесь может быть записано много дейсвий которые выполняются и результат изчислений нужно вернуть во вне функции
    return num; // возвращает наружу значение локальной переменной => let num = 50;
}

const anotherNum = ret(); // в переменную =>anotherNum мы помещаем результат работы функции =>ret
console.log(anotherNum); // в консоль выведется => 50

//////////////////////////////////////////////////////

// FUNCTION DECKFRATION
function foo() {
    // Создается до начала выполнения скрипта, можна вызвать перед обявлением
}

// Робочий пример
console.log(calc1(4, 3));
console.log(calc1(5, 6));
console.log(calc1(5, 5));

function calc1(a, b) { 
    return (a + b); 
}
// Робочий пример

// FUNCTION EXPRESSION
let foo1 = function() {
    // Создается только тогда, когда доходит поток кода, можно вызвать только после обявления.
};

// Робочий пример
const logger = function() { // создаем переменную, а значение функции это ее внутринее состояние
    console.log('Hello');
}; // обезательно ставить => ; <=

logger(); // вызов функции
// Робочий пример

// СТРЕЛОЧНАЯ ФУНКЦИЯ

// () =>
// Не имеет своего контексто (this)

// Рабочий пример №1 Сокращенный

const calcs = (a, b) => a + b; // Переменная => calcs в которую мы помещаем стрелочную функцию
// (a, b) аргументы
// => стрелочка которая говорит выполнить определенный код

// Рабочий пример №2 
const calcss = (a, b) => {   // если конструкция в одну строчку то фигурные скобки можна не писать const calcss = (a, b) => a + b;
    console.log('1');
     return a + b;
};

