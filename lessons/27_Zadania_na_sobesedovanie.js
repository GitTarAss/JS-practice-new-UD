'use strict'; // Режим сучасного кода!

// №1 // =>	Какое будет выведено значение: let x = 5; alert( x++ ); ?

/*
let x = 5; alert( x++ ); // ( x++ ) добавляет =>1 но сначала выводит старое значение =>х=5
// в бравзере выведется =>5
let x = 5; alert( ++x ); // ( ++x ) добавляет =>1 к значению =>х=5
// в бравзере выведется =>6
*/

// №2 // => Чему равно такое выражение: [ ] + false - null + true ?

//[ ] + false - null + true;
/*
console.log([] + false); 
// в консоль выводится =>false
console.log(typeof([] + false)); // пустой массив как тип данныз является строкой
// в консоль выводится =>string

console.log([] + false - null); // NaN - значение при выполнении нематиматических операцый
// в консоль выводится =>NaN

console.log([] + false - null + true); // NaN - значение при выполнении нематиматических операцый
// в консоль выводится =>NaN
*/

// №3 // =>	Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?
/*
let y = 1; 
let x = y = 2; //  Операция выполняется с лева на право. Сначала пресваиваем =>y = 2; перезаписывая навое значение, потом пресваивоем x = y;
alert(x); // выводится =>2
*/

// №4 // =>	Чему равна сумма [ ] + 1 + 2?
/*
let mass = [ ] + 1 + 2; // [ ] - это у нас строка так что потом 1 + 2 идет также как строка
    console.log(mass); // в консоль выводится =>12
*/

// №5 // =>	Что выведет этот код: alert( "1"[0] )?
/*
alert( "1"[0] ); // [0] - индекс строки. Так как сторка состоит из одного символа и он какраз попорядку под номером =>0, то выведется первый символ из стороки =>"1"
//или так
console.log( "1"[0] ); // // в консоль выводится =>1
*/

// №6 // =>	Чему равно 2 && 1 && null && 0 && undefined ?
/*
console.log(2 && 1 && null && 0 && undefined); // идет с лева на право. и 2=>true и 1=>true и null=>false оператот =>И(&&) запинается на лжи и дальше проверять не будет
// В консоль выведется  =>null
// Оператор =>ИЛИ(||) всегда запинается на =>true
console.log(typeof(2 && 1 && null && 0 && undefined)); // В консоль выведется  =>object
*/

// №7 // =>	Есть ли разница между выражениями? !!( a && b ) и (a && b)?
/*
console.log( !!( 1 && 2 ) === (1 && 2) ); // два восклицатильных знака =>!! превращают следующие с ним выражение в булиновое
// Эти два значения не равны. В консоль выводится =>false
*/

// №8 // =>	Что выведет этот код: alert( null || 2 && 3 || 4 ); ?
/*
alert( null || 2 && 3 || 4 ); // выведется =>3

console.log(null || 2 && 3 || 4 ); // чтобы понимать каторый из операторов сработает первым нужно смотреть таблицу приоритетов операторов
// Так как и(&&) выше по приоритету от или(||) то сначала срабатывает (2 && 3)
// (2 && 3) когда у нас оба аргумента при логическом сравнении равны то у нас оператор будет возвращать послелнее значение =>3
// Теперь (null || 3) так как null=>false в логическом контексте и пре операторе ИЛИ(||) он работает корректно то опять оператор будет возвращать послелнее значение =>3
// Теперь (3 || 4) =>ИЛИ(||) всегда запинается на =>true а =>3 это правда=>true то выводится первое что правда
*/

// №9 // =>	a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?
/*
const a = [1, 2, 3]; // Переменная =>а не ровна переменной =>b так как это разные переменные (разные ящики с одинаковыми цыфрами в нутри)
const b = [1, 2, 3]; // Но если сравнить вместимое етих переменных то тогла 1==1; 2==2; 3==3;

console.log(a == b); // в консоль выведется =>false
*/

// №10 // => Что выведет этот код: alert( +"Infinity" ); ?
/*
alert( +"Infinity" ); // в бравзере выведется просто Infinity
console.log(typeof(+'Infinity')); // В консоль выведется =>number
*/


// №11 // => Верно ли сравнение: "Ёжик" > "яблоко"?
/*
console.log("Ёжик" > "яблоко"); // сравнение кодировки Unicode Сравнивается первые символы, тотом если Ё>я сравнивается вторые и т.д.
// Для решения самому без консоли нужно открыть таблицу с символами Unicode
// в консоль выведется =>false
*/

// №12 // => Чему равно 0 || "" || 2 || undefined || true || falsе ?
/*
console.log(0 || "" || 2 || undefined || true || falsе); // =>0 в логическом контексте это =>falsе
// =>"" это =>=>falsе
// =>2 это =>true и дальше проверка не пойдет
// В консоль выведется =>2
*/